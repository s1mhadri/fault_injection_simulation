#!/usr/bin/env python

import rospy
from gazebo_msgs.msg import ModelStates
from std_msgs.msg import Int32
from sensor_msgs.msg import JointState
from tf.transformations import euler_from_quaternion


class Failure_Monitor:
    def __init__(self):
        self.model_state_sub = rospy.Subscriber(
            "/gazebo/model_states", ModelStates, self.model_callback
        )
        self.action_state_sub = rospy.Subscriber(
            "/action_states", Int32, self.action_callback
        )
        self.failure_pub = rospy.Publisher("failure_type_cube", Int32, queue_size=100)

        self.shared_data = None
        self.firsthalf = True
        self.release = True
        self.pick_time = 1000
        self.release_time = 1000
        self.cube_in_hand = False
        self.check_collision = True

        self.failure_type = Int32()
        self.failure_type.data = 0

    def action_callback(self, data):
        self.shared_data = data.data

    def _publish_failure_type(self, fault_effect):
        if fault_effect == 3:
            rospy.logwarn_once("doesnt pick")
            self.failure_type.data = 3
            self.failure_pub.publish(self.failure_type)
        elif fault_effect == 4:
            rospy.logwarn_once("doesnt lose")
            self.failure_type.data = 4
            self.failure_pub.publish(self.failure_type)
        elif fault_effect == 5:
            rospy.logwarn_once("collision")
            self.failure_type.data = 5
            self.failure_pub.publish(self.failure_type)
        elif fault_effect == 6:
            rospy.logwarn_once("thrown away")
            self.failure_type.data = 6
            self.failure_pub.publish(self.failure_type)
        else:
            rospy.logerr_once("okay")
            self.failure_type.data = 0
            self.failure_pub.publish(self.failure_type)

    def model_callback(self, msg):
        if "cube" in msg.name:
            index = msg.name.index("cube")
            velocity = msg.twist[index].linear
            pose = msg.pose[index].position
            orientation = msg.pose[index].orientation
            roll, pitch, yaw = euler_from_quaternion(
                [orientation.x, orientation.y, orientation.z, orientation.w]
            )

            now = rospy.get_time()

            pick_fail_cond = (
                (self.pick_time + 0.75) < now < (self.pick_time + 1.25)
            ) and (0.001 > pose.z > -0.001) and (abs(roll) < 0.25 or abs(pitch) < 0.25)

            release_fail_cond = (
                self.release_time < now < (self.release_time + 0.5)
            ) and (
                0.8 > abs(velocity.x) > 0.05
                and 0.8 > abs(velocity.y) > 0.05
                and 0.8 > abs(velocity.z) > 0.05
            )

            collision_cond = (
                (self.check_collision == True and self.cube_in_hand == False)
                and (abs(roll) >= 0.25 or abs(pitch) >= 0.25)
                and (
                    abs(velocity.x) >= 0.05
                    or abs(velocity.y) >= 0.05
                    or abs(velocity.z) >= 0.05
                )
            )

            thrown_cond = (self.cube_in_hand == True) and (
                abs(velocity.x) >= 1
                or abs(velocity.y) >= 1
                or abs(velocity.z) >= 1
            )

            if self.shared_data != None and self.shared_data <= 9:
                self._publish_failure_type(0)

                if self.shared_data == 4 and self.firsthalf == True:
                    self.pick_time = now
                    self.firsthalf = False

                if self.shared_data == 8 and self.release == True:
                    self.release_time = now
                    self.release = False

                if pose.z > 0.01:
                    self.cube_in_hand = True
                else:
                    self.cube_in_hand = False

                if pick_fail_cond:
                    self._publish_failure_type(3)

                if release_fail_cond:
                    self._publish_failure_type(4)

                if collision_cond:
                    self._publish_failure_type(5)

                if thrown_cond:
                    self.check_collision = False
                    self._publish_failure_type(6)
            else:
                self._publish_failure_type(0)


if __name__ == "__main__":
    try:
        rospy.init_node("failure_monitor", anonymous=True)
        Failure_Monitor()
        rospy.spin()

    except rospy.ROSInterruptException:
        pass
